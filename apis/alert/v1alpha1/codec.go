/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecMetricThresholdConfig{}).Type1()): ConfigurationSpecMetricThresholdConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecThresholdConfig{}).Type1()):       ConfigurationSpecThresholdConfigCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecMetricThresholdConfig{}).Type1()): ConfigurationSpecMetricThresholdConfigCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecThresholdConfig{}).Type1()):       ConfigurationSpecThresholdConfigCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type ConfigurationSpecMetricThresholdConfigCodec struct {
}

func (ConfigurationSpecMetricThresholdConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigurationSpecMetricThresholdConfig)(ptr) == nil
}

func (ConfigurationSpecMetricThresholdConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigurationSpecMetricThresholdConfig)(ptr)
	var objs []ConfigurationSpecMetricThresholdConfig
	if obj != nil {
		objs = []ConfigurationSpecMetricThresholdConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecMetricThresholdConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigurationSpecMetricThresholdConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigurationSpecMetricThresholdConfig)(ptr) = ConfigurationSpecMetricThresholdConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigurationSpecMetricThresholdConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecMetricThresholdConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigurationSpecMetricThresholdConfig)(ptr) = objs[0]
			} else {
				*(*ConfigurationSpecMetricThresholdConfig)(ptr) = ConfigurationSpecMetricThresholdConfig{}
			}
		} else {
			*(*ConfigurationSpecMetricThresholdConfig)(ptr) = ConfigurationSpecMetricThresholdConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ConfigurationSpecMetricThresholdConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecMetricThresholdConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ConfigurationSpecMetricThresholdConfig)(ptr) = obj
		} else {
			*(*ConfigurationSpecMetricThresholdConfig)(ptr) = ConfigurationSpecMetricThresholdConfig{}
		}
	default:
		iter.ReportError("decode ConfigurationSpecMetricThresholdConfig", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type ConfigurationSpecThresholdConfigCodec struct {
}

func (ConfigurationSpecThresholdConfigCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*ConfigurationSpecThresholdConfig)(ptr) == nil
}

func (ConfigurationSpecThresholdConfigCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*ConfigurationSpecThresholdConfig)(ptr)
	var objs []ConfigurationSpecThresholdConfig
	if obj != nil {
		objs = []ConfigurationSpecThresholdConfig{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecThresholdConfig{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (ConfigurationSpecThresholdConfigCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*ConfigurationSpecThresholdConfig)(ptr) = ConfigurationSpecThresholdConfig{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []ConfigurationSpecThresholdConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecThresholdConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*ConfigurationSpecThresholdConfig)(ptr) = objs[0]
			} else {
				*(*ConfigurationSpecThresholdConfig)(ptr) = ConfigurationSpecThresholdConfig{}
			}
		} else {
			*(*ConfigurationSpecThresholdConfig)(ptr) = ConfigurationSpecThresholdConfig{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj ConfigurationSpecThresholdConfig

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(ConfigurationSpecThresholdConfig{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*ConfigurationSpecThresholdConfig)(ptr) = obj
		} else {
			*(*ConfigurationSpecThresholdConfig)(ptr) = ConfigurationSpecThresholdConfig{}
		}
	default:
		iter.ReportError("decode ConfigurationSpecThresholdConfig", "unexpected JSON type")
	}
}
