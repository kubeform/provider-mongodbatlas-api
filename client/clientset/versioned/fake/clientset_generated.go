/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned"
	alertv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/alert/v1alpha1"
	fakealertv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/alert/v1alpha1/fake"
	auditingv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/auditing/v1alpha1"
	fakeauditingv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/auditing/v1alpha1/fake"
	cloudv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/cloud/v1alpha1"
	fakecloudv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/cloud/v1alpha1/fake"
	clusterv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/cluster/v1alpha1"
	fakeclusterv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/cluster/v1alpha1/fake"
	customv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/custom/v1alpha1"
	fakecustomv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/custom/v1alpha1/fake"
	datav1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/data/v1alpha1"
	fakedatav1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/data/v1alpha1/fake"
	databasev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/database/v1alpha1"
	fakedatabasev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/database/v1alpha1/fake"
	encryptionv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/encryption/v1alpha1"
	fakeencryptionv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/encryption/v1alpha1/fake"
	eventv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/event/v1alpha1"
	fakeeventv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/event/v1alpha1/fake"
	globalv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/global/v1alpha1"
	fakeglobalv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/global/v1alpha1/fake"
	ldapv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/ldap/v1alpha1"
	fakeldapv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/ldap/v1alpha1/fake"
	maintenancev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/maintenance/v1alpha1"
	fakemaintenancev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/maintenance/v1alpha1/fake"
	networkv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/network/v1alpha1"
	fakenetworkv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/network/v1alpha1/fake"
	onlinev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/online/v1alpha1"
	fakeonlinev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/online/v1alpha1/fake"
	privatev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/private/v1alpha1"
	fakeprivatev1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/private/v1alpha1/fake"
	privatelinkv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/privatelink/v1alpha1"
	fakeprivatelinkv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/privatelink/v1alpha1/fake"
	projectv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/project/v1alpha1"
	fakeprojectv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/project/v1alpha1/fake"
	searchv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/search/v1alpha1"
	fakesearchv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/search/v1alpha1/fake"
	teamv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/team/v1alpha1"
	faketeamv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/team/v1alpha1/fake"
	teamsv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/teams/v1alpha1"
	faketeamsv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/teams/v1alpha1/fake"
	thirdv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/third/v1alpha1"
	fakethirdv1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/third/v1alpha1/fake"
	x509v1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/x509/v1alpha1"
	fakex509v1alpha1 "kubeform.dev/provider-mongodbatlas-api/client/clientset/versioned/typed/x509/v1alpha1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// AlertV1alpha1 retrieves the AlertV1alpha1Client
func (c *Clientset) AlertV1alpha1() alertv1alpha1.AlertV1alpha1Interface {
	return &fakealertv1alpha1.FakeAlertV1alpha1{Fake: &c.Fake}
}

// AuditingV1alpha1 retrieves the AuditingV1alpha1Client
func (c *Clientset) AuditingV1alpha1() auditingv1alpha1.AuditingV1alpha1Interface {
	return &fakeauditingv1alpha1.FakeAuditingV1alpha1{Fake: &c.Fake}
}

// CloudV1alpha1 retrieves the CloudV1alpha1Client
func (c *Clientset) CloudV1alpha1() cloudv1alpha1.CloudV1alpha1Interface {
	return &fakecloudv1alpha1.FakeCloudV1alpha1{Fake: &c.Fake}
}

// ClusterV1alpha1 retrieves the ClusterV1alpha1Client
func (c *Clientset) ClusterV1alpha1() clusterv1alpha1.ClusterV1alpha1Interface {
	return &fakeclusterv1alpha1.FakeClusterV1alpha1{Fake: &c.Fake}
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return &fakecustomv1alpha1.FakeCustomV1alpha1{Fake: &c.Fake}
}

// DataV1alpha1 retrieves the DataV1alpha1Client
func (c *Clientset) DataV1alpha1() datav1alpha1.DataV1alpha1Interface {
	return &fakedatav1alpha1.FakeDataV1alpha1{Fake: &c.Fake}
}

// DatabaseV1alpha1 retrieves the DatabaseV1alpha1Client
func (c *Clientset) DatabaseV1alpha1() databasev1alpha1.DatabaseV1alpha1Interface {
	return &fakedatabasev1alpha1.FakeDatabaseV1alpha1{Fake: &c.Fake}
}

// EncryptionV1alpha1 retrieves the EncryptionV1alpha1Client
func (c *Clientset) EncryptionV1alpha1() encryptionv1alpha1.EncryptionV1alpha1Interface {
	return &fakeencryptionv1alpha1.FakeEncryptionV1alpha1{Fake: &c.Fake}
}

// EventV1alpha1 retrieves the EventV1alpha1Client
func (c *Clientset) EventV1alpha1() eventv1alpha1.EventV1alpha1Interface {
	return &fakeeventv1alpha1.FakeEventV1alpha1{Fake: &c.Fake}
}

// GlobalV1alpha1 retrieves the GlobalV1alpha1Client
func (c *Clientset) GlobalV1alpha1() globalv1alpha1.GlobalV1alpha1Interface {
	return &fakeglobalv1alpha1.FakeGlobalV1alpha1{Fake: &c.Fake}
}

// LdapV1alpha1 retrieves the LdapV1alpha1Client
func (c *Clientset) LdapV1alpha1() ldapv1alpha1.LdapV1alpha1Interface {
	return &fakeldapv1alpha1.FakeLdapV1alpha1{Fake: &c.Fake}
}

// MaintenanceV1alpha1 retrieves the MaintenanceV1alpha1Client
func (c *Clientset) MaintenanceV1alpha1() maintenancev1alpha1.MaintenanceV1alpha1Interface {
	return &fakemaintenancev1alpha1.FakeMaintenanceV1alpha1{Fake: &c.Fake}
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return &fakenetworkv1alpha1.FakeNetworkV1alpha1{Fake: &c.Fake}
}

// OnlineV1alpha1 retrieves the OnlineV1alpha1Client
func (c *Clientset) OnlineV1alpha1() onlinev1alpha1.OnlineV1alpha1Interface {
	return &fakeonlinev1alpha1.FakeOnlineV1alpha1{Fake: &c.Fake}
}

// PrivateV1alpha1 retrieves the PrivateV1alpha1Client
func (c *Clientset) PrivateV1alpha1() privatev1alpha1.PrivateV1alpha1Interface {
	return &fakeprivatev1alpha1.FakePrivateV1alpha1{Fake: &c.Fake}
}

// PrivatelinkV1alpha1 retrieves the PrivatelinkV1alpha1Client
func (c *Clientset) PrivatelinkV1alpha1() privatelinkv1alpha1.PrivatelinkV1alpha1Interface {
	return &fakeprivatelinkv1alpha1.FakePrivatelinkV1alpha1{Fake: &c.Fake}
}

// ProjectV1alpha1 retrieves the ProjectV1alpha1Client
func (c *Clientset) ProjectV1alpha1() projectv1alpha1.ProjectV1alpha1Interface {
	return &fakeprojectv1alpha1.FakeProjectV1alpha1{Fake: &c.Fake}
}

// SearchV1alpha1 retrieves the SearchV1alpha1Client
func (c *Clientset) SearchV1alpha1() searchv1alpha1.SearchV1alpha1Interface {
	return &fakesearchv1alpha1.FakeSearchV1alpha1{Fake: &c.Fake}
}

// TeamV1alpha1 retrieves the TeamV1alpha1Client
func (c *Clientset) TeamV1alpha1() teamv1alpha1.TeamV1alpha1Interface {
	return &faketeamv1alpha1.FakeTeamV1alpha1{Fake: &c.Fake}
}

// TeamsV1alpha1 retrieves the TeamsV1alpha1Client
func (c *Clientset) TeamsV1alpha1() teamsv1alpha1.TeamsV1alpha1Interface {
	return &faketeamsv1alpha1.FakeTeamsV1alpha1{Fake: &c.Fake}
}

// ThirdV1alpha1 retrieves the ThirdV1alpha1Client
func (c *Clientset) ThirdV1alpha1() thirdv1alpha1.ThirdV1alpha1Interface {
	return &fakethirdv1alpha1.FakeThirdV1alpha1{Fake: &c.Fake}
}

// X509V1alpha1 retrieves the X509V1alpha1Client
func (c *Clientset) X509V1alpha1() x509v1alpha1.X509V1alpha1Interface {
	return &fakex509v1alpha1.FakeX509V1alpha1{Fake: &c.Fake}
}
