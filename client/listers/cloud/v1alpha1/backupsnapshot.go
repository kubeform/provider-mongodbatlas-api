/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupSnapshotLister helps list BackupSnapshots.
// All objects returned here must be treated as read-only.
type BackupSnapshotLister interface {
	// List lists all BackupSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshot, err error)
	// BackupSnapshots returns an object that can list and get BackupSnapshots.
	BackupSnapshots(namespace string) BackupSnapshotNamespaceLister
	BackupSnapshotListerExpansion
}

// backupSnapshotLister implements the BackupSnapshotLister interface.
type backupSnapshotLister struct {
	indexer cache.Indexer
}

// NewBackupSnapshotLister returns a new BackupSnapshotLister.
func NewBackupSnapshotLister(indexer cache.Indexer) BackupSnapshotLister {
	return &backupSnapshotLister{indexer: indexer}
}

// List lists all BackupSnapshots in the indexer.
func (s *backupSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshot))
	})
	return ret, err
}

// BackupSnapshots returns an object that can list and get BackupSnapshots.
func (s *backupSnapshotLister) BackupSnapshots(namespace string) BackupSnapshotNamespaceLister {
	return backupSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupSnapshotNamespaceLister helps list and get BackupSnapshots.
// All objects returned here must be treated as read-only.
type BackupSnapshotNamespaceLister interface {
	// List lists all BackupSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshot, err error)
	// Get retrieves the BackupSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackupSnapshot, error)
	BackupSnapshotNamespaceListerExpansion
}

// backupSnapshotNamespaceLister implements the BackupSnapshotNamespaceLister
// interface.
type backupSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupSnapshots in the indexer for a given namespace.
func (s backupSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshot))
	})
	return ret, err
}

// Get retrieves the BackupSnapshot from the indexer for a given namespace and name.
func (s backupSnapshotNamespaceLister) Get(name string) (*v1alpha1.BackupSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupsnapshot"), name)
	}
	return obj.(*v1alpha1.BackupSnapshot), nil
}
