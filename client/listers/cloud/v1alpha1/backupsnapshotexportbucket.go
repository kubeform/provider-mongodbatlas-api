/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupSnapshotExportBucketLister helps list BackupSnapshotExportBuckets.
// All objects returned here must be treated as read-only.
type BackupSnapshotExportBucketLister interface {
	// List lists all BackupSnapshotExportBuckets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotExportBucket, err error)
	// BackupSnapshotExportBuckets returns an object that can list and get BackupSnapshotExportBuckets.
	BackupSnapshotExportBuckets(namespace string) BackupSnapshotExportBucketNamespaceLister
	BackupSnapshotExportBucketListerExpansion
}

// backupSnapshotExportBucketLister implements the BackupSnapshotExportBucketLister interface.
type backupSnapshotExportBucketLister struct {
	indexer cache.Indexer
}

// NewBackupSnapshotExportBucketLister returns a new BackupSnapshotExportBucketLister.
func NewBackupSnapshotExportBucketLister(indexer cache.Indexer) BackupSnapshotExportBucketLister {
	return &backupSnapshotExportBucketLister{indexer: indexer}
}

// List lists all BackupSnapshotExportBuckets in the indexer.
func (s *backupSnapshotExportBucketLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotExportBucket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshotExportBucket))
	})
	return ret, err
}

// BackupSnapshotExportBuckets returns an object that can list and get BackupSnapshotExportBuckets.
func (s *backupSnapshotExportBucketLister) BackupSnapshotExportBuckets(namespace string) BackupSnapshotExportBucketNamespaceLister {
	return backupSnapshotExportBucketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupSnapshotExportBucketNamespaceLister helps list and get BackupSnapshotExportBuckets.
// All objects returned here must be treated as read-only.
type BackupSnapshotExportBucketNamespaceLister interface {
	// List lists all BackupSnapshotExportBuckets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotExportBucket, err error)
	// Get retrieves the BackupSnapshotExportBucket from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackupSnapshotExportBucket, error)
	BackupSnapshotExportBucketNamespaceListerExpansion
}

// backupSnapshotExportBucketNamespaceLister implements the BackupSnapshotExportBucketNamespaceLister
// interface.
type backupSnapshotExportBucketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupSnapshotExportBuckets in the indexer for a given namespace.
func (s backupSnapshotExportBucketNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotExportBucket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshotExportBucket))
	})
	return ret, err
}

// Get retrieves the BackupSnapshotExportBucket from the indexer for a given namespace and name.
func (s backupSnapshotExportBucketNamespaceLister) Get(name string) (*v1alpha1.BackupSnapshotExportBucket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupsnapshotexportbucket"), name)
	}
	return obj.(*v1alpha1.BackupSnapshotExportBucket), nil
}
