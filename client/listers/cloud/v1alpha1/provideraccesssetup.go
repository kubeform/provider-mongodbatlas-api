/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProviderAccessSetupLister helps list ProviderAccessSetups.
// All objects returned here must be treated as read-only.
type ProviderAccessSetupLister interface {
	// List lists all ProviderAccessSetups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderAccessSetup, err error)
	// ProviderAccessSetups returns an object that can list and get ProviderAccessSetups.
	ProviderAccessSetups(namespace string) ProviderAccessSetupNamespaceLister
	ProviderAccessSetupListerExpansion
}

// providerAccessSetupLister implements the ProviderAccessSetupLister interface.
type providerAccessSetupLister struct {
	indexer cache.Indexer
}

// NewProviderAccessSetupLister returns a new ProviderAccessSetupLister.
func NewProviderAccessSetupLister(indexer cache.Indexer) ProviderAccessSetupLister {
	return &providerAccessSetupLister{indexer: indexer}
}

// List lists all ProviderAccessSetups in the indexer.
func (s *providerAccessSetupLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderAccessSetup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderAccessSetup))
	})
	return ret, err
}

// ProviderAccessSetups returns an object that can list and get ProviderAccessSetups.
func (s *providerAccessSetupLister) ProviderAccessSetups(namespace string) ProviderAccessSetupNamespaceLister {
	return providerAccessSetupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProviderAccessSetupNamespaceLister helps list and get ProviderAccessSetups.
// All objects returned here must be treated as read-only.
type ProviderAccessSetupNamespaceLister interface {
	// List lists all ProviderAccessSetups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderAccessSetup, err error)
	// Get retrieves the ProviderAccessSetup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProviderAccessSetup, error)
	ProviderAccessSetupNamespaceListerExpansion
}

// providerAccessSetupNamespaceLister implements the ProviderAccessSetupNamespaceLister
// interface.
type providerAccessSetupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProviderAccessSetups in the indexer for a given namespace.
func (s providerAccessSetupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderAccessSetup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderAccessSetup))
	})
	return ret, err
}

// Get retrieves the ProviderAccessSetup from the indexer for a given namespace and name.
func (s providerAccessSetupNamespaceLister) Get(name string) (*v1alpha1.ProviderAccessSetup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provideraccesssetup"), name)
	}
	return obj.(*v1alpha1.ProviderAccessSetup), nil
}
