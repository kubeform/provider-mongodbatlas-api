/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupSnapshotRestoreJobLister helps list BackupSnapshotRestoreJobs.
// All objects returned here must be treated as read-only.
type BackupSnapshotRestoreJobLister interface {
	// List lists all BackupSnapshotRestoreJobs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotRestoreJob, err error)
	// BackupSnapshotRestoreJobs returns an object that can list and get BackupSnapshotRestoreJobs.
	BackupSnapshotRestoreJobs(namespace string) BackupSnapshotRestoreJobNamespaceLister
	BackupSnapshotRestoreJobListerExpansion
}

// backupSnapshotRestoreJobLister implements the BackupSnapshotRestoreJobLister interface.
type backupSnapshotRestoreJobLister struct {
	indexer cache.Indexer
}

// NewBackupSnapshotRestoreJobLister returns a new BackupSnapshotRestoreJobLister.
func NewBackupSnapshotRestoreJobLister(indexer cache.Indexer) BackupSnapshotRestoreJobLister {
	return &backupSnapshotRestoreJobLister{indexer: indexer}
}

// List lists all BackupSnapshotRestoreJobs in the indexer.
func (s *backupSnapshotRestoreJobLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotRestoreJob, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshotRestoreJob))
	})
	return ret, err
}

// BackupSnapshotRestoreJobs returns an object that can list and get BackupSnapshotRestoreJobs.
func (s *backupSnapshotRestoreJobLister) BackupSnapshotRestoreJobs(namespace string) BackupSnapshotRestoreJobNamespaceLister {
	return backupSnapshotRestoreJobNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupSnapshotRestoreJobNamespaceLister helps list and get BackupSnapshotRestoreJobs.
// All objects returned here must be treated as read-only.
type BackupSnapshotRestoreJobNamespaceLister interface {
	// List lists all BackupSnapshotRestoreJobs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotRestoreJob, err error)
	// Get retrieves the BackupSnapshotRestoreJob from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BackupSnapshotRestoreJob, error)
	BackupSnapshotRestoreJobNamespaceListerExpansion
}

// backupSnapshotRestoreJobNamespaceLister implements the BackupSnapshotRestoreJobNamespaceLister
// interface.
type backupSnapshotRestoreJobNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupSnapshotRestoreJobs in the indexer for a given namespace.
func (s backupSnapshotRestoreJobNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BackupSnapshotRestoreJob, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BackupSnapshotRestoreJob))
	})
	return ret, err
}

// Get retrieves the BackupSnapshotRestoreJob from the indexer for a given namespace and name.
func (s backupSnapshotRestoreJobNamespaceLister) Get(name string) (*v1alpha1.BackupSnapshotRestoreJob, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("backupsnapshotrestorejob"), name)
	}
	return obj.(*v1alpha1.BackupSnapshotRestoreJob), nil
}
