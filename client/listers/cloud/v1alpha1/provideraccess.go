/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/cloud/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ProviderAccessLister helps list ProviderAccesses.
// All objects returned here must be treated as read-only.
type ProviderAccessLister interface {
	// List lists all ProviderAccesses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderAccess, err error)
	// ProviderAccesses returns an object that can list and get ProviderAccesses.
	ProviderAccesses(namespace string) ProviderAccessNamespaceLister
	ProviderAccessListerExpansion
}

// providerAccessLister implements the ProviderAccessLister interface.
type providerAccessLister struct {
	indexer cache.Indexer
}

// NewProviderAccessLister returns a new ProviderAccessLister.
func NewProviderAccessLister(indexer cache.Indexer) ProviderAccessLister {
	return &providerAccessLister{indexer: indexer}
}

// List lists all ProviderAccesses in the indexer.
func (s *providerAccessLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderAccess, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderAccess))
	})
	return ret, err
}

// ProviderAccesses returns an object that can list and get ProviderAccesses.
func (s *providerAccessLister) ProviderAccesses(namespace string) ProviderAccessNamespaceLister {
	return providerAccessNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ProviderAccessNamespaceLister helps list and get ProviderAccesses.
// All objects returned here must be treated as read-only.
type ProviderAccessNamespaceLister interface {
	// List lists all ProviderAccesses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ProviderAccess, err error)
	// Get retrieves the ProviderAccess from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ProviderAccess, error)
	ProviderAccessNamespaceListerExpansion
}

// providerAccessNamespaceLister implements the ProviderAccessNamespaceLister
// interface.
type providerAccessNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ProviderAccesses in the indexer for a given namespace.
func (s providerAccessNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ProviderAccess, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ProviderAccess))
	})
	return ret, err
}

// Get retrieves the ProviderAccess from the indexer for a given namespace and name.
func (s providerAccessNamespaceLister) Get(name string) (*v1alpha1.ProviderAccess, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("provideraccess"), name)
	}
	return obj.(*v1alpha1.ProviderAccess), nil
}
