/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/private/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpModeLister helps list IpModes.
// All objects returned here must be treated as read-only.
type IpModeLister interface {
	// List lists all IpModes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpMode, err error)
	// IpModes returns an object that can list and get IpModes.
	IpModes(namespace string) IpModeNamespaceLister
	IpModeListerExpansion
}

// ipModeLister implements the IpModeLister interface.
type ipModeLister struct {
	indexer cache.Indexer
}

// NewIpModeLister returns a new IpModeLister.
func NewIpModeLister(indexer cache.Indexer) IpModeLister {
	return &ipModeLister{indexer: indexer}
}

// List lists all IpModes in the indexer.
func (s *ipModeLister) List(selector labels.Selector) (ret []*v1alpha1.IpMode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpMode))
	})
	return ret, err
}

// IpModes returns an object that can list and get IpModes.
func (s *ipModeLister) IpModes(namespace string) IpModeNamespaceLister {
	return ipModeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpModeNamespaceLister helps list and get IpModes.
// All objects returned here must be treated as read-only.
type IpModeNamespaceLister interface {
	// List lists all IpModes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpMode, err error)
	// Get retrieves the IpMode from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpMode, error)
	IpModeNamespaceListerExpansion
}

// ipModeNamespaceLister implements the IpModeNamespaceLister
// interface.
type ipModeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpModes in the indexer for a given namespace.
func (s ipModeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpMode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpMode))
	})
	return ret, err
}

// Get retrieves the IpMode from the indexer for a given namespace and name.
func (s ipModeNamespaceLister) Get(name string) (*v1alpha1.IpMode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipmode"), name)
	}
	return obj.(*v1alpha1.IpMode), nil
}
