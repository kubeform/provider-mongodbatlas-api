/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/privatelink/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EndpointServiceLister helps list EndpointServices.
// All objects returned here must be treated as read-only.
type EndpointServiceLister interface {
	// List lists all EndpointServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointService, err error)
	// EndpointServices returns an object that can list and get EndpointServices.
	EndpointServices(namespace string) EndpointServiceNamespaceLister
	EndpointServiceListerExpansion
}

// endpointServiceLister implements the EndpointServiceLister interface.
type endpointServiceLister struct {
	indexer cache.Indexer
}

// NewEndpointServiceLister returns a new EndpointServiceLister.
func NewEndpointServiceLister(indexer cache.Indexer) EndpointServiceLister {
	return &endpointServiceLister{indexer: indexer}
}

// List lists all EndpointServices in the indexer.
func (s *endpointServiceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointService))
	})
	return ret, err
}

// EndpointServices returns an object that can list and get EndpointServices.
func (s *endpointServiceLister) EndpointServices(namespace string) EndpointServiceNamespaceLister {
	return endpointServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EndpointServiceNamespaceLister helps list and get EndpointServices.
// All objects returned here must be treated as read-only.
type EndpointServiceNamespaceLister interface {
	// List lists all EndpointServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.EndpointService, err error)
	// Get retrieves the EndpointService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.EndpointService, error)
	EndpointServiceNamespaceListerExpansion
}

// endpointServiceNamespaceLister implements the EndpointServiceNamespaceLister
// interface.
type endpointServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EndpointServices in the indexer for a given namespace.
func (s endpointServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EndpointService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EndpointService))
	})
	return ret, err
}

// Get retrieves the EndpointService from the indexer for a given namespace and name.
func (s endpointServiceNamespaceLister) Get(name string) (*v1alpha1.EndpointService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("endpointservice"), name)
	}
	return obj.(*v1alpha1.EndpointService), nil
}
