/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/x509/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuthenticationDatabaseUserLister helps list AuthenticationDatabaseUsers.
// All objects returned here must be treated as read-only.
type AuthenticationDatabaseUserLister interface {
	// List lists all AuthenticationDatabaseUsers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuthenticationDatabaseUser, err error)
	// AuthenticationDatabaseUsers returns an object that can list and get AuthenticationDatabaseUsers.
	AuthenticationDatabaseUsers(namespace string) AuthenticationDatabaseUserNamespaceLister
	AuthenticationDatabaseUserListerExpansion
}

// authenticationDatabaseUserLister implements the AuthenticationDatabaseUserLister interface.
type authenticationDatabaseUserLister struct {
	indexer cache.Indexer
}

// NewAuthenticationDatabaseUserLister returns a new AuthenticationDatabaseUserLister.
func NewAuthenticationDatabaseUserLister(indexer cache.Indexer) AuthenticationDatabaseUserLister {
	return &authenticationDatabaseUserLister{indexer: indexer}
}

// List lists all AuthenticationDatabaseUsers in the indexer.
func (s *authenticationDatabaseUserLister) List(selector labels.Selector) (ret []*v1alpha1.AuthenticationDatabaseUser, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthenticationDatabaseUser))
	})
	return ret, err
}

// AuthenticationDatabaseUsers returns an object that can list and get AuthenticationDatabaseUsers.
func (s *authenticationDatabaseUserLister) AuthenticationDatabaseUsers(namespace string) AuthenticationDatabaseUserNamespaceLister {
	return authenticationDatabaseUserNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuthenticationDatabaseUserNamespaceLister helps list and get AuthenticationDatabaseUsers.
// All objects returned here must be treated as read-only.
type AuthenticationDatabaseUserNamespaceLister interface {
	// List lists all AuthenticationDatabaseUsers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AuthenticationDatabaseUser, err error)
	// Get retrieves the AuthenticationDatabaseUser from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AuthenticationDatabaseUser, error)
	AuthenticationDatabaseUserNamespaceListerExpansion
}

// authenticationDatabaseUserNamespaceLister implements the AuthenticationDatabaseUserNamespaceLister
// interface.
type authenticationDatabaseUserNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuthenticationDatabaseUsers in the indexer for a given namespace.
func (s authenticationDatabaseUserNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuthenticationDatabaseUser, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuthenticationDatabaseUser))
	})
	return ret, err
}

// Get retrieves the AuthenticationDatabaseUser from the indexer for a given namespace and name.
func (s authenticationDatabaseUserNamespaceLister) Get(name string) (*v1alpha1.AuthenticationDatabaseUser, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("authenticationdatabaseuser"), name)
	}
	return obj.(*v1alpha1.AuthenticationDatabaseUser), nil
}
