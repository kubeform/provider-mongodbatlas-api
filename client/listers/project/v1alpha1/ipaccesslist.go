/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/project/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpAccessListLister helps list IpAccessLists.
// All objects returned here must be treated as read-only.
type IpAccessListLister interface {
	// List lists all IpAccessLists in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAccessList, err error)
	// IpAccessLists returns an object that can list and get IpAccessLists.
	IpAccessLists(namespace string) IpAccessListNamespaceLister
	IpAccessListListerExpansion
}

// ipAccessListLister implements the IpAccessListLister interface.
type ipAccessListLister struct {
	indexer cache.Indexer
}

// NewIpAccessListLister returns a new IpAccessListLister.
func NewIpAccessListLister(indexer cache.Indexer) IpAccessListLister {
	return &ipAccessListLister{indexer: indexer}
}

// List lists all IpAccessLists in the indexer.
func (s *ipAccessListLister) List(selector labels.Selector) (ret []*v1alpha1.IpAccessList, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAccessList))
	})
	return ret, err
}

// IpAccessLists returns an object that can list and get IpAccessLists.
func (s *ipAccessListLister) IpAccessLists(namespace string) IpAccessListNamespaceLister {
	return ipAccessListNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpAccessListNamespaceLister helps list and get IpAccessLists.
// All objects returned here must be treated as read-only.
type IpAccessListNamespaceLister interface {
	// List lists all IpAccessLists in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAccessList, err error)
	// Get retrieves the IpAccessList from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpAccessList, error)
	IpAccessListNamespaceListerExpansion
}

// ipAccessListNamespaceLister implements the IpAccessListNamespaceLister
// interface.
type ipAccessListNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpAccessLists in the indexer for a given namespace.
func (s ipAccessListNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpAccessList, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAccessList))
	})
	return ret, err
}

// Get retrieves the IpAccessList from the indexer for a given namespace and name.
func (s ipAccessListNamespaceLister) Get(name string) (*v1alpha1.IpAccessList, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipaccesslist"), name)
	}
	return obj.(*v1alpha1.IpAccessList), nil
}
