/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/data/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LakeLister helps list Lakes.
// All objects returned here must be treated as read-only.
type LakeLister interface {
	// List lists all Lakes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lake, err error)
	// Lakes returns an object that can list and get Lakes.
	Lakes(namespace string) LakeNamespaceLister
	LakeListerExpansion
}

// lakeLister implements the LakeLister interface.
type lakeLister struct {
	indexer cache.Indexer
}

// NewLakeLister returns a new LakeLister.
func NewLakeLister(indexer cache.Indexer) LakeLister {
	return &lakeLister{indexer: indexer}
}

// List lists all Lakes in the indexer.
func (s *lakeLister) List(selector labels.Selector) (ret []*v1alpha1.Lake, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lake))
	})
	return ret, err
}

// Lakes returns an object that can list and get Lakes.
func (s *lakeLister) Lakes(namespace string) LakeNamespaceLister {
	return lakeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LakeNamespaceLister helps list and get Lakes.
// All objects returned here must be treated as read-only.
type LakeNamespaceLister interface {
	// List lists all Lakes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Lake, err error)
	// Get retrieves the Lake from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Lake, error)
	LakeNamespaceListerExpansion
}

// lakeNamespaceLister implements the LakeNamespaceLister
// interface.
type lakeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Lakes in the indexer for a given namespace.
func (s lakeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Lake, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Lake))
	})
	return ret, err
}

// Get retrieves the Lake from the indexer for a given namespace and name.
func (s lakeNamespaceLister) Get(name string) (*v1alpha1.Lake, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("lake"), name)
	}
	return obj.(*v1alpha1.Lake), nil
}
