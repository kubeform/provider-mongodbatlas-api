/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-mongodbatlas-api/apis/teams/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TeamsLister helps list Teamses.
// All objects returned here must be treated as read-only.
type TeamsLister interface {
	// List lists all Teamses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Teams, err error)
	// Teamses returns an object that can list and get Teamses.
	Teamses(namespace string) TeamsNamespaceLister
	TeamsListerExpansion
}

// teamsLister implements the TeamsLister interface.
type teamsLister struct {
	indexer cache.Indexer
}

// NewTeamsLister returns a new TeamsLister.
func NewTeamsLister(indexer cache.Indexer) TeamsLister {
	return &teamsLister{indexer: indexer}
}

// List lists all Teamses in the indexer.
func (s *teamsLister) List(selector labels.Selector) (ret []*v1alpha1.Teams, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Teams))
	})
	return ret, err
}

// Teamses returns an object that can list and get Teamses.
func (s *teamsLister) Teamses(namespace string) TeamsNamespaceLister {
	return teamsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TeamsNamespaceLister helps list and get Teamses.
// All objects returned here must be treated as read-only.
type TeamsNamespaceLister interface {
	// List lists all Teamses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Teams, err error)
	// Get retrieves the Teams from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Teams, error)
	TeamsNamespaceListerExpansion
}

// teamsNamespaceLister implements the TeamsNamespaceLister
// interface.
type teamsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Teamses in the indexer for a given namespace.
func (s teamsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Teams, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Teams))
	})
	return ret, err
}

// Get retrieves the Teams from the indexer for a given namespace and name.
func (s teamsNamespaceLister) Get(name string) (*v1alpha1.Teams, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("teams"), name)
	}
	return obj.(*v1alpha1.Teams), nil
}
